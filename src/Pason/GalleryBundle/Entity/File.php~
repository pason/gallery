<?php

namespace Pason\GalleryBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Pason\GalleryBundle\Entity\File
 *
 * @ORM\Table(name="file")
 * @Gedmo\SoftDeleteable(fieldName="deletedAt")
 * @ORM\HasLifecycleCallbacks
 * @ORM\Entity(repositoryClass="Pason\GalleryBundle\Entity\FileRepository")
 */
class File
{
	
	/**
	 * @var integer $id
	 *
	 * @ORM\Column(name="id", type="integer")
	 * @ORM\Id
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
	private $id;

	/**
	 * @var string $orginal
	 * @ORM\Column(name="orginal", type="string", length=255, nullable=true)
	 */
	private $orginal;
	
	/**
	 * @var string $name
	 * @ORM\Column(name="name", type="string", length=255, nullable=true)
	 */
	private $name;
	
	/**
	 * @var string $path
	 */
	private $path;
	
	/**
	 * @var string $url
	 */
	private $url;
	
	/**
	 * @var string $width
	 * @ORM\Column(name="width", type="string", length=255, nullable=true)
	 */
	private $width;
	
	/**
	 * @var string $height
	 * @ORM\Column(name="height", type="string", length=255, nullable=true)
	 */
	private $height;
		
	/**
	 * @ORM\ManyToOne(targetEntity="User", inversedBy="file", cascade={"persist"})
	 * @ORM\JoinColumn(name="user_id", referencedColumnName="id", onDelete="CASCADE")
	 */
	protected $user;
	
	/**
	 * @var string $type
	 * @ORM\Column(name="type", type="string", length=255, nullable=false)
	 */
	private $type;
	
	/**
	 * @Assert\File(maxSize="10000000")
	 */
	public $file;
	
	/**
	 * @Gedmo\Timestampable(on="create")
	 * @ORM\Column(name="created", type="datetime")
	 */
	private $created;

	/**
	 * @ORM\Column(name="updated", type="datetime", nullable=true)
	 * @Gedmo\Timestampable(on="update")
	 */
	private $updated;

	/**
	 * @ORM\Column(name="deletedAt", type="datetime", nullable=true)
	 */
	private $deletedAt;

    
	
	
	/**
	 * @ORM\PrePersist()
	 * @ORM\PreUpdate()
	 */
	public function preUpload()
	{
		if (null !== $this->file) {			
			$filename = sha1(uniqid(mt_rand(), true));
			$this->path = $filename.'.'.$this->file->guessExtension();
		}
	}
	
	/**
	 * @ORM\PostPersist()
	 * @ORM\PostUpdate()
	 */
	public function upload()
	{
		if (null === $this->file) {
			return;
		}
	
		$this->file->move($this->getUploadRootDir(), $this->path);
	
		unset($this->file);
	}
	
	/**
	 * @ORM\PostRemove()
	 */
	public function removeUpload()
	{
		if ($file = $this->getAbsolutePath()) {
			unlink($file);
		}
	}
	
	public function getAbsolutePath()
    {
        return null === $this->path
            ? null
            : $this->getUploadRootDir().'/'.$this->path;
    }

    public function getWebPath()
    {
        return null === $this->path
            ? null
            : $this->getUploadDir().'/'.$this->path;
    }
    
    protected function getUploadRootDir()
    {
    	
    	return __DIR__.'/../../../../web/'.$this->getUploadDir();
    }
    
    protected function getUploadDir()
    {   	
    	return 'uploads/media';
    }

    
   
    

   
}